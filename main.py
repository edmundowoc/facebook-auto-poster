import os
import time
import random
import schedule
from selenium import webdriver
from selenium.webdriver.chrome.options import Options
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.chrome.service import Service
from dotenv import load_dotenv

# ============================================================
# üí° Za≈Çaduj dane logowania z pliku .env
# ============================================================
load_dotenv()
PHONE = os.getenv("PHONE")      # numer telefonu do logowania
PASSWORD = os.getenv("PASSWORD")  # has≈Ço do konta

# ============================================================
# üìã Wczytaj listy grup i post√≥w (z separatorami ---)
# ============================================================
def load_data():
    """Wczytuje listy grup i post√≥w z plik√≥w tekstowych"""
    # wczytaj grupy
    with open("groups.txt", "r", encoding="utf-8") as g:
        groups = [line.strip() for line in g.readlines() if line.strip()]

    # wczytaj posty ‚Äì ka≈ºdy blok oddzielony przez ---
    with open("posts.txt", "r", encoding="utf-8") as p:
        content = p.read()
        posts = [post.strip() for post in content.split('---') if post.strip()]

    return groups, posts

# ============================================================
# ‚öôÔ∏è Konfiguracja przeglƒÖdarki Chrome w trybie headless
# ============================================================
def create_driver():
    """Tworzy przeglƒÖdarkƒô Chrome w trybie headless (bez GUI)"""
    chrome_options = Options()
    chrome_options.add_argument("--headless")  # tryb bez GUI
    chrome_options.add_argument("--no-sandbox")
    chrome_options.add_argument("--disable-dev-shm-usage")
    chrome_options.add_argument("--disable-gpu")
    chrome_options.add_argument("--window-size=1920,1080")
    chrome_options.add_argument("--disable-blink-features=AutomationControlled")

    service = Service()
    driver = webdriver.Chrome(service=service, options=chrome_options)
    return driver

# ============================================================
# üîê Logowanie do Facebooka za pomocƒÖ numeru telefonu
# ============================================================
def facebook_login(driver):
    """Loguje siƒô na Facebooka przy u≈ºyciu numeru telefonu"""
    driver.get("https://www.facebook.com/login")
    time.sleep(random.uniform(3, 5))

    try:
        phone_input = driver.find_element(By.ID, "email")
        password_input = driver.find_element(By.ID, "pass")
        login_button = driver.find_element(By.NAME, "login")

        phone_input.send_keys(PHONE)
        time.sleep(random.uniform(1, 2))
        password_input.send_keys(PASSWORD)
        time.sleep(random.uniform(1, 3))
        login_button.click()

        time.sleep(random.uniform(5, 7))
        print("‚úÖ Zalogowano na Facebooka (numer telefonu).")
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd podczas logowania: {e}")

# ============================================================
# üìù Publikacja posta w danej grupie
# ============================================================
def post_to_group(driver, group_url, post_text):
    """Publikuje pojedynczy post w danej grupie"""
    print(f"üöÄ Publikujƒô post w grupie: {group_url}")
    driver.get(group_url)
    time.sleep(random.uniform(4, 6))

    try:
        # Znajd≈∫ pole do wpisania posta (Facebook czƒôsto zmienia selektory)
        post_box = driver.find_element(By.XPATH, "//div[@role='textbox']")
        post_box.click()
        time.sleep(random.uniform(2, 4))
        post_box.send_keys(post_text)
        time.sleep(random.uniform(2, 4))

        # Symuluj klikniƒôcie Enter (lub kombinacjƒô CTRL+Enter)
        post_box.send_keys(Keys.CONTROL, Keys.ENTER)
        time.sleep(random.uniform(3, 5))
        print("‚úÖ Post opublikowany pomy≈õlnie!\n")
    except Exception as e:
        print(f"‚ùå B≈ÇƒÖd przy publikacji w grupie {group_url}: {e}")

# ============================================================
# üîÅ G≈Ç√≥wna logika publikacji
# ============================================================
def main():
    """G≈Ç√≥wna funkcja cyklu publikacji"""
    print("\n============================")
    print("üîÑ Rozpoczynam cykl publikacji...")
    print("============================\n")

    groups, posts = load_data()
    driver = create_driver()
    facebook_login(driver)

    # Dopasuj posty do grup 1:1
    for i in range(min(len(groups), len(posts))):
        print(f"‚û°Ô∏è  Post {i+1}/{len(posts)}")
        post_to_group(driver, groups[i], posts[i])
        time.sleep(random.uniform(3, 6))  # realistyczne op√≥≈∫nienia

    driver.quit()
    print("\n‚úÖ Wszystkie posty zosta≈Çy opublikowane!\n")

# ============================================================
# ‚è∞ Harmonogram - powtarzaj co 2 godziny
# ============================================================
schedule.every(2).hours.do(main)

# Uruchom pierwszy raz od razu
main()

# Pƒôtla dzia≈Çania (ciƒÖg≈Ça praca bota)
while True:
    schedule.run_pending()
    time.sleep(10)
